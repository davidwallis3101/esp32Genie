<?xml version="1.0" encoding="utf-16"?>
<ProgramBlock xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <ConditionType>OnTrue</ConditionType>
  <Conditions />
  <Commands />
  <ScriptCondition>Program.Setup(()=&gt;
{              
  	Program.AddInputField("ClientId", "hg-01", "0. Enter unique ID for this client");
	Program.AddInputField("ServerAddress", "", "1. MQTT server address");
  	Program.AddInputField("ServerPort", "1883", "2. MQTT server port");
  	//Program.AddInputField("ServerTopic", "MyMQTT/#", "3. Topic");
});
//
return true;</ScriptCondition>
  <ScriptSource>string server = Program.InputField("ServerAddress").Value.Trim();
int port = 1883;
int.TryParse(Program.InputField("ServerPort").Value, out port);
//string topic = Program.InputField("ServerTopic").Value.Trim();
string topic = "#";
string clientid = Program.InputField("ClientId").Value.Trim();

if (server == "")
{
  Program.Notify("MQTT", "Please configure server address");
  Pause(10);
  return;
}
else
{
  //Program.Notify("espGenie", "Connecting to " + server + "...");
  try
  {
    Net.MqttService(server, port, clientid);
    Program.Notify("espGenie", "Connected!");
  } 
  catch (Exception e) 
  {
    Program.Notify("espGenie", e.Message);
    //Pause(5);
    return;
  }
}

Net.Subscribe(topic, (mtopic, mpayload) =&gt; {
  var parts = mtopic.Split('/');

  if (parts.Length == 4)
  {
    try
    {
      var sensorId = parts[1];
      var deviceId = parts[2];
      var deviceType = parts[3];
      
      switch(deviceType){
        case "V_HUM":
          deviceType = "Sensor.Humidity";
          break;
        case "V_TEMP":
          deviceType = "Sensor.Temperature";
          mpayload = ((double.Parse(mpayload) - 32) / 1.8).ToString(); // Convert F to C
          break;
        case "V_LIGHT_LEVEL":
          deviceType = "Sensor.Luminance";
          break;
      }

      var module = Modules.InDomain("espGenie").WithAddress(sensorId).Get();
      if (module.Instance == null)
      {
        Program.AddVirtualModule("espGenie", sensorId, "Sensor", "homegenie/generic/sensor");
        module = Modules.InDomain("espGenie").WithAddress(sensorId).Get();
      }
      if(module.Parameter(deviceType).Value != mpayload){
        module.Parameter(deviceType).Value = mpayload;
        Program.RaiseEvent(module, deviceType, mpayload, "");
        module.Parameter("Status.Level").Value = mpayload;
        Program.RaiseEvent(module, "Status.Level", mpayload, "");
      }
    } catch (Exception e) { Program.Notify("espGenie Error", e.Message);  }
  }
});

Program.GoBackground();</ScriptSource>
  <ScriptErrors>[]</ScriptErrors>
  <IsRunning>true</IsRunning>
  <Features />
  <LastConditionEvaluationResult>true</LastConditionEvaluationResult>
  <Domain>HomeAutomation.HomeGenie.Automation</Domain>
  <Address>99</Address>
  <Name>espGenie</Name>
  <Description>Program for integrating with espGenie</Description>
  <Group>Devices and Things</Group>
  <ActivationTime>2016-02-27T00:00:00.0000000Z</ActivationTime>
  <TriggerTime>2016-02-27T00:00:00.0000000Z</TriggerTime>
  <Type>CSharp</Type>
  <IsEnabled>true</IsEnabled>
</ProgramBlock>