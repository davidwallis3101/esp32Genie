<?xml version="1.0" encoding="utf-16"?>
<ProgramBlock xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <ConditionType>OnTrue</ConditionType>
  <Conditions />
  <Commands />
  <ScriptCondition>Program.Setup(()=&gt;
{              
  	Program.AddOption("ClientId", System.Environment.MachineName, "0. Enter unique ID for this client", "text");
	Program.AddOption("ServerAddress", "", "MQTT server address (Do not use 127.0.0.1)", "text");
  	Program.AddOption("ServerPort", "1883", "MQTT server port", "text");
  	Program.AddOption("ServerTopic", "home/espgenie", "Topic", "text");
});
//
return true;</ScriptCondition>
  <ScriptSource>string server = Program.Option("ServerAddress").Value.Trim();
int port = 1883;
int.TryParse(Program.Option("ServerPort").Value, out port);
string topic = Program.Option("ServerTopic").Value.Trim();
// string topic = "#"; // listen all
string clientid = Program.Option("ClientId").Value.Trim();

if (server == "")
{
  Program.Notify("MQTT", "Please configure server address");
  Pause(10);
  return;
}
else
{
  Program.Notify("espGenie", "Connecting to " + server + "...");
  try
  {
    //MqttClient.MqttService(server, port, clientid);
    MqttClient.Connect(port, clientid);
    Program.Notify("espGenie", "Connected!");
  } 
  catch (Exception e) 
  {
    Program.Notify("espGenie", e.Message);
    //Pause(5);
    return;
  }
}

MqttClient.Subscribe(topic, (mtopic, mpayload) =&gt; {
  
    Program.Notify("espGenie payload", mtopic);
    var parts = mtopic.Split('/');

    if (parts.Length != 4)
    {
        Program.Notify("espGenie", "Invalid parts length");
        return;
    }
    try
    {
        
        var sensorId = parts[1];
        var deviceId = parts[2];
        var deviceType = parts[3];
        
        switch(deviceType){
            case "V_HUM":
                deviceType = "Sensor.Humidity";
                break;
            case "V_TEMP":
                deviceType = "Sensor.Temperature";
                mpayload = ((double.Parse(mpayload) - 32) / 1.8).ToString(); // Convert F to C
                break;
            case "V_LIGHT_LEVEL":
                deviceType = "Sensor.Luminance";
                break;
        }

        var module = Modules.InDomain("espGenie")
          .WithAddress(sensorId)
          .Get();
      
        if (module.Instance == null)
        {
            Program.AddVirtualModule("espGenie", sensorId, "Sensor", "homegenie/generic/sensor");
            module = Modules.InDomain("espGenie").WithAddress(sensorId).Get();
        }
        
        if(module.Parameter(deviceType).Value != mpayload){
            module.Parameter(deviceType).Value = mpayload;
            Program.RaiseEvent(module, deviceType, mpayload, "");
            module.Parameter("Status.Level").Value = mpayload;
            Program.RaiseEvent(module, "Status.Level", mpayload, "");
        }
    } 
    catch (Exception e) 
    {
            Program.Notify("espGenie Error", e.Message); 
    }
  
});

Program.GoBackground();</ScriptSource>
  <ScriptErrors />
  <Domain>HomeAutomation.HomeGenie.Automation</Domain>
  <Address>1003</Address>
  <Name>espGenie</Name>
  <Description>Program for integrating with espGenie</Description>
  <Group>EspGenie</Group>
  <Features />
  <ActivationTime>2017-07-05T21:22:50.626473Z</ActivationTime>
  <TriggerTime>2017-07-05T21:22:50.780569Z</TriggerTime>
  <Type>CSharp</Type>
  <IsEnabled>true</IsEnabled>
</ProgramBlock>